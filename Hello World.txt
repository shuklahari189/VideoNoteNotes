Programs.

To get a computer to do something, you (or someone else) have to tell it exactly — in excruciating detail — what to do. Such a description of “what to do” is called a program, and programming is the activity of writing and testing such programs. 
computers are really dumb. They have to have everything described precisely and in detail.

Programming language.

To be able to describe “things” precisely for a computer, we need a precisely defined language with a specific grammar (English is far too loosely structured for that) and a well-defined vocabulary for the kinds of actions we want performed. Such a language is called a programming language.
C++ is a programming language.


The classic first program.

// Prints "Hello World" to the screen
#include "std_lib_facilities.h" // Preprocessor directive
int main() // Entry Point
{
    cout << "Hello World\n"; // output: Hello World
    // Single Line Comment
    //  Multiline \
        Comment
    /*  Multiline
        Comment */
}

Think of this text as a set of instructions that we give to the computer to execute, much as we would give a recipe to a cook.


Let’s discuss what each line of this program does, starting with the line:

cout << "Hello World\n"; // output: Hello World

That’s the line that actually produces the output. It prints the characters Hello, World! followed by a newline; that is, after writing Hello, World!, the cursor will be placed at the start of the next line.

In C++, string literals are delimited by double quotes (").

The \n is a “special character” indicating a newline.

The name cout refers to a standard output stream. Characters “put into cout” using the output operator << will appear on the screen. The name cout is pronounced “see-out” and is an abbreviation of “character output stream.”


Comments.

The end of that line // output: Hello World  is a comment.
Comments are ignored by the compiler and written for the benefit of programmers who read the code.
There are two types of comments:

Single Line Comment:
// output: Hello World
Multiline Comment:
//  Multiline \
        Comment
    /*  Multiline
        Comment */


std_lib_facilities.h The Header file.

A file included using #include usually has the suffix .h or .hpp and is called a header or a header file. A header contains definitions of terms, such as cout, that we use in our program.
#include is one of the preprocessor directive which instructs the computer to make available (“to simply copy”) code from a file called std_lib_facilities.h .
std_lib_facilities.h makes the standard C++ stream I/O facilities available. Here, we just use the standard output stream, cout, and its output operator, <<.


The Main Function.

computer knows where to start executing a program by looking for a function called main and starts executing the instructions it finds there. 

Every C++ program must have a function called main to tell it where to start executing. A function is basically a named sequence of instructions for the computer to execute in the order in which they are written. 

A function has four parts: 
• A return type, here int (meaning “integer”), which specifies what kind of result, if any, the function will return to whoever asked for it to be executed. The word int is a reserved word in C++ (a keyword), so int cannot be used as the name of anything else. 
• A name, here main. 
• A parameter list enclosed in parentheses, here (); in this case, the parameter list is empty. 
• A function body enclosed in a set of “curly braces,” { }, which lists the actions (called statements) that the function is to perform.


Statements.

A part of a C++ program that specifies an action and isn’t a  preprocessor directive is called a statement. 


Compilation.

C++ is a compiled language. That means that to get a program to run, you must first translate it from the human-readable form to something a machine can “understand.” 
That translation is done by a program called a compiler.

What you read and write is called Source code or program text .

What the computer executes is called Executable, Object code, or Machine code.

C++ source code files are given the suffix .cpp (e.g., hello_world.cpp) or .h or .hpp (as in std_lib_facilities.h), and object code files are given the suffix .obj (on Windows) or .o (Unix).

The compiler reads your source code and tries to make sense of what you wrote.
It looks to see if your program is grammatically correct, if every word has a defined meaning, and if there is anything obviously wrong that can be detected without trying to actually execute the program.
You’ll find that compilers are rather picky about syntax. Leaving out any detail of our program, such as an #include file, a semicolon, or a curly brace, will cause errors. Similarly, the compiler has absolutely zero tolerance for spelling mistakes.


Linking.

A program usually consists of several separate parts, often developed by different people.
For example, the “Hello, World!” program consists of the part we wrote plus parts of the C++ standard library. 
These separate parts (sometimes called translation units) must be compiled and the resulting object code files must be linked together to form an executable program. 
The program that links such parts together is (unsurprisingly) called a linker.

note that object code and executables are not portable among systems. For example, when you compile for a Windows machine, you get object code for Windows that will not run on a Linux machine.

A library is simply some code — usually written by others — that we access using declarations found in an #included file. A declaration is a program statement specifying how a piece of code can be used.


Error.

Errors found by the compiler are called compile-time errors, errors found by the linker are called link-time errors, and errors not found until the program is run are called run-time errors or logic errors. 
Generally, compile-time errors are easier to understand and fix than link-time errors, and link-time errors are often easier to find and fix than run-time errors and logic errors.


Programming environments.

To program, we use a programming language. We also use a compiler to translate our source code into object code and a linker to link our object code into an executable program. 
In addition, we use some program to enter our source code text into the computer and to edit it. These are just the first and most crucial tools that constitute our programmer’s tool set or “program development environment.”
If you work from a command-line window, as many professional programmers do, you will have to issue the compile and link commands yourself. If instead you use an IDE (“interactive development environment” or “integrated development environment”), as many professional programmers also do, a simple click on the correct button will do the job.
IDEs usually include an editor with helpful features like color coding to help distinguish between comments, keywords, and other parts of your program source code, plus other facilities to help you debug your code, compile it, and run it.

Debugging. 

the activity of finding errors in a program and removing them.